{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores.ts","../../src/LoanList.svelte","../../src/PaymentSchedule.svelte","../../src/QuickFacts.svelte","../../src/SetPaymentPlan.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.1' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable, derived } from \"svelte/store\";\nexport const loans = writable(JSON.parse(window.localStorage.getItem(\"loans\")) || [\n    {\n        name: \"Example loan 1\",\n        principal: 1000,\n        interestPct: 2,\n        minPayment: 100,\n    },\n    {\n        name: \"Example loan 2\",\n        principal: 2000,\n        interestPct: 3,\n        minPayment: 200,\n    },\n]);\nexport const monthlyPayment = writable(0);\nexport const paymentPlan = writable(window.localStorage.getItem(\"paymentPlan\") ||\n    \"avalanche\");\nexport const storage = derived([loans, paymentPlan], ([$loans, $paymentPlan]) => {\n    window.localStorage.setItem(\"loans\", JSON.stringify($loans));\n    window.localStorage.setItem(\"paymentPlan\", $paymentPlan);\n});\nexport const paymentSchedule = derived([loans, monthlyPayment, paymentPlan], ([$loans, $monthlyPayment, $paymentPlan]) => {\n    const sortedLoans = [...$loans].sort((a, b) => {\n        if ($paymentPlan === \"avalanche\") {\n            return a.interestPct < b.interestPct ? 1 : -1;\n        }\n        else {\n            return a.principal > b.principal ? 1 : -1;\n        }\n    });\n    const createMonthZero = (loans) => {\n        let month = new Map();\n        loans.forEach((loan) => {\n            month.set(loan.name, {\n                remainingPrincipal: loan.principal,\n                payment: 0,\n            });\n        });\n        return [month];\n    };\n    const calculatePayment = (loans, payment, months) => {\n        let month = new Map();\n        let remainingPayment = payment;\n        for (let loan of loans) {\n            let principalLastMonth = months[months.length - 1].get(loan.name).remainingPrincipal;\n            let interest = ((loan.interestPct * 0.01) / 12) * principalLastMonth;\n            principalLastMonth += interest;\n            let record = {\n                remainingPrincipal: principalLastMonth - loan.minPayment,\n                payment: principalLastMonth < loan.minPayment\n                    ? principalLastMonth\n                    : loan.minPayment,\n            };\n            if (record.remainingPrincipal < 0) {\n                payment += record.remainingPrincipal;\n                record.remainingPrincipal = 0;\n            }\n            month.set(loan.name, record);\n            remainingPayment -= record.payment;\n        }\n        for (let loan of loans) {\n            let record = month.get(loan.name);\n            record.remainingPrincipal -= remainingPayment;\n            record.payment += remainingPayment;\n            remainingPayment = 0;\n            if (record.remainingPrincipal <= 0) {\n                record.payment += record.remainingPrincipal;\n                remainingPayment -= record.remainingPrincipal;\n                record.remainingPrincipal = 0;\n            }\n            month.set(loan.name, record);\n        }\n        months = [...months, month];\n        return months;\n    };\n    const generatePaymentSchedule = (loans, payment) => {\n        let months = createMonthZero(loans);\n        for (let i = 0; i < 200; i++) {\n            months = calculatePayment(loans, payment, months);\n            let currentMonth = months[months.length - 1];\n            let remaining = 0;\n            for (let loanName of currentMonth.keys()) {\n                remaining += currentMonth.get(loanName).remainingPrincipal;\n            }\n            if (remaining === 0)\n                break;\n        }\n        return months;\n    };\n    return generatePaymentSchedule(sortedLoans, $monthlyPayment);\n});\n","<script lang=\"ts\">\n\timport { loans } from \"./stores\";\n\n\ttype Loan = {\n\t\tname: string;\n\t\tprincipal: number;\n\t\tinterestPct: number;\n\t\tminPayment: number;\n\t};\n\n\tlet newLoan: Loan;\n\tlet newLoanError: {\n\t\tname: string;\n\t\tprincipal: string;\n\t\tinterestPct: string;\n\t\tminPayment: string;\n\t} = {name: \"\", principal: \"\", interestPct: \"\", minPayment: \"\"};\n\n\tconst addNewLoan = () => {\n\t\tnewLoan = cleanLoan(newLoan);\n\t\t\n\t\tif (validateLoan(newLoan)) {\n\t\t\tloans.set([...$loans, newLoan]);\n\t\t\tresetNewLoan();\n\t\t}\n\t};\n\n\tconst cleanLoan = (loan: Loan): Loan => {\n\t\tlet cleanLoan = {...loan};\n\t\tcleanLoan.name = loan.name?.trim() || \"\";\n\t\tcleanLoan.principal = Number(loan.principal?.toString().replaceAll('$', '').trim()) || null;\n\t\tcleanLoan.interestPct = Number(loan.interestPct?.toString().replaceAll('%', '').trim()) || null;\n\t\tcleanLoan.minPayment = Number(loan.minPayment?.toString().replaceAll('$', '').trim()) || null;\n\t\treturn cleanLoan;\n\t}\n\n\tconst validateLoan = (loan: Loan): boolean => {\n\t\tnewLoanError = {name: \"\", principal: \"\", interestPct: \"\", minPayment: \"\"};\n\t\tif ($loans.map((l) => l.name).includes(loan.name))\n\t\t\tnewLoanError.name = \"Loan name must be unique\";\n\t\tif (loan.name.length == 0) \n\t\t\tnewLoanError.name = \"Loan must have a name\";\n\t\tif (loan.principal <= 0 || loan.principal == null)\n\t\t\tnewLoanError.principal = \"Principal must be > 0\";\n\t\tif (loan.interestPct < 0 || loan.interestPct == null)\n\t\t\tnewLoanError.interestPct = \"Interest must be >= 0\";\n\t\tif (loan.minPayment <= 0 || loan.minPayment == null)\n\t\t\tnewLoanError.minPayment = \"Minimum payment must be > 0\";\n\n\t\treturn Object.keys(newLoanError).reduce((total, value) => total && newLoanError[value].length == 0, true);\n\t};\n\n\tconst resetNewLoan = () => {\n\t\tnewLoan = {\n\t\t\tname: undefined,\n\t\t\tprincipal: undefined,\n\t\t\tinterestPct: undefined,\n\t\t\tminPayment: undefined,\n\t\t};\n\t};\n\n\tresetNewLoan();\n\n\tconst deleteLoan = (i) => {\n\t\t$loans = $loans.filter((_, index) => index != i);\n\t};\n\n\tconst toggleVisibility = (e) => {\n\t\tlet target = e.target;\n\t\tif (!target.classList.contains(\"title\")) target = target.parentElement;\n\t\ttarget.classList.toggle(\"active\");\n\t\ttarget.nextElementSibling.classList.toggle(\"active\");\n\t};\n</script>\n\n<div class=\"ui styled accordion\">\n\t{#each $loans as loan, i}\n\t\t<div class=\"title\" on:click={(event) => toggleVisibility(event)}>\n\t\t\t<i class=\"dropdown icon\" />\n\t\t\t{loan.name}\n\t\t\t<i\n\t\t\t\tclass=\"icon trash alternate outline float-right\"\n\t\t\t\ton:click={() => deleteLoan(i)}\n\t\t\t/>\n\t\t</div>\n\t\t<div class=\"content\">\n\t\t\t<div>\n\t\t\t\t<b>Principal: </b>\n\t\t\t\t${loan.principal}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<b>Interest: </b>\n\t\t\t\t{loan.interestPct}%\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<b>Monthly Payment: </b>\n\t\t\t\t${loan.minPayment}\n\t\t\t</div>\n\t\t</div>\n\t{/each}\n\t<div class=\"new-loan content active\">\n\t\t<form class=\"ui form\" on:submit={(e) => e.preventDefault()}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Loan Name\"\n\t\t\t\tbind:value={newLoan.name}\n\t\t\t\ton:input={() => newLoanError.name = \"\"}\n\t\t\t/>\n\t\t\t{#if newLoanError.name}<div class=\"error\">{newLoanError.name}</div>{/if}\n\t\t\t<input\n\t\t\t\ttype=\"number\"\n\t\t\t\tplaceholder=\"Principal\"\n\t\t\t\tbind:value={newLoan.principal}\n\t\t\t\ton:input={() => newLoanError.principal = \"\"}\n\t\t\t/>\n\t\t\t{#if newLoanError.principal}<div class=\"error\">{newLoanError.principal}</div>{/if}\n\t\t\t<input\n\t\t\t\ttype=\"number\"\n\t\t\t\tplaceholder=\"Interest %\"\n\t\t\t\tbind:value={newLoan.interestPct}\n\t\t\t\ton:input={() => newLoanError.interestPct = \"\"}\n\t\t\t/>\n\t\t\t{#if newLoanError.interestPct}<div class=\"error\">{newLoanError.interestPct}</div>{/if}\n\t\t\t<input\n\t\t\t\ttype=\"number\"\n\t\t\t\tplaceholder=\"Minimum Payment\"\n\t\t\t\tbind:value={newLoan.minPayment}\n\t\t\t\ton:input={() => newLoanError.minPayment = \"\"}\n\t\t\t/>\n\t\t\t{#if newLoanError.minPayment}<div class=\"error\">{newLoanError.minPayment}</div>{/if}\n\t\t\t<button class=\"ui button\" on:click={addNewLoan}> Add Loan </button>\n\t\t</form>\n\t</div>\n</div>\n\n<style type=\"text/scss\">\n\t.accordion {\n\t\twidth: auto !important;\n\t}\n\n\t.title {\n\t\tcolor: black !important;\n\t}\n\n\t.float-right {\n\t\tfloat: right;\n\t}\n\n\t.trash.icon {\n\t\tpadding: 0 15px 20px;\n\t}\n\n\t.button {\n\t\tmargin: 2em auto auto;\n\t\twidth: 100%;\n\t}\n\n\t.new-loan:not(:first-child) {\n\t\tborder-top: 1px solid rgba(34, 36, 38, 0.15);\n\t}\n\n\t.error {\n\t\tcolor: rgb(168, 39, 39);\n\t\tfont-size: .9em;\n\t\tpadding-left: 3.5px\n\t}\n\n\tinput {\n\t\tborder-top: 0 !important;\n\t\tborder-left: 0 !important;\n\t\tborder-right: 0 !important;\n\t\tpadding-left: 0.25em !important;\n\t}\n\n\tinput[type=\"number\"] {\n\t\t-moz-appearance: textfield !important;\n\t}\n\n\t::placeholder {\n\t\tcolor: black !important;\n\t}\n</style>\n","<script lang=\"ts\">\n  import { loans, paymentSchedule } from \"./stores\";\n</script>\n\n<div class=\"table-container\">\n  <table class=\"ui structured unstackable table\">\n    <thead>\n      <tr>\n        <th>Month</th>\n        <th>Loan</th>\n        <th>Payment</th>\n        <th>Remaining</th>\n      </tr>\n    </thead>\n    <tbody>\n      {#each $paymentSchedule as month, i}\n        {#if i > 0}\n          {#each [...month.keys()] as loanName, j}\n            <tr>\n              {#if j === 0}\n                <td rowspan={$loans.length}>{i}</td>\n              {/if}\n              <td>{loanName}</td>\n              <td>${month.get(loanName).payment.toFixed(2)}</td>\n              <td>${month.get(loanName).remainingPrincipal.toFixed(2)}</td>\n            </tr>\n          {/each}\n        {/if}\n      {/each}\n    </tbody>\n  </table>\n</div>\n\n<style>\n  .table-container {\n    max-width: 100%;\n    max-height: 75vh;\n    overflow-y: scroll !important;\n  }\n</style>\n","<script lang=\"ts\">\n    import { paymentSchedule, loans } from \"./stores\";\n\n    $: totalPaid = $paymentSchedule.reduce((total, record) => {\n        for (let loan of record.keys()) {\n            total += record.get(loan).payment;\n        }\n        return total;\n    }, 0);\n    $: totalOwed = $loans.reduce((total, loan) => total + loan.principal, 0);\n    $: averageInterest = $loans.reduce(\n        (total, loan) =>\n            total + (loan.interestPct * loan.principal) / totalOwed,\n        0\n    );\n</script>\n\n<div class=\"statistics\">\n    <div class=\"statistic\">\n        <div class=\"value\">${totalOwed}</div>\n        <div class=\"label\">Total Owed</div>\n    </div>\n    <div class=\"statistic\">\n        <div class=\"value\">{$paymentSchedule.length - 1}</div>\n        <div class=\"label\">Months</div>\n    </div>\n    <div class=\"statistic\">\n        <div class=\"value\">${(totalPaid - totalOwed).toFixed(2)}</div>\n        <div class=\"label\">Interest Accrued</div>\n    </div>\n    <div class=\"statistic\">\n        <div class=\"value\">{averageInterest.toFixed(2)}%</div>\n        <div class=\"label\">Avg. Interest</div>\n    </div>\n</div>\n\n<style>\n.statistics {\n    display: flex;\n    justify-content: space-around !important;\n    width: 100%;\n    text-align: center;\n    flex-wrap: wrap;\n}\n\n.statistic {\n    flex-shrink: 1;\n    padding: .5em;\n}\n\n.statistic .value {\n    font-size: 2.8em !important;\n}\n\n.statistic .label {\n    font-size: 1em !important;\n    font-weight: normal;\n    text-transform: capitalize;\n    margin: .5em auto;\n}\n</style>\n","<script lang=\"ts\">\n    import { loans, monthlyPayment, paymentPlan } from \"./stores\";\n\n    $: minimumMonthlyPayment = $loans.reduce(\n        (total, loan) => total + loan.minPayment,\n        0\n    );\n    $: maximumMonthlyPayment = $loans.reduce(\n        (total, loan) => total + loan.principal,\n        0\n    );\n    $: $monthlyPayment = minimumMonthlyPayment;\n</script>\n\n<div class=\"container\">\n    <div class=\"ui form\">\n        <div class=\"grouped fields\">\n            <div class=\"field\">\n                <div class=\"ui radio\">\n                    <label>\n                        <input\n                            type=\"radio\"\n                            bind:group={$paymentPlan}\n                            value=\"avalanche\"\n                        />\n                        Highest Interest Rate (Avalanche)\n                    </label>\n                </div>\n            </div>\n            <div class=\"field\">\n                <div class=\"ui radio\">\n                    <label>\n                        <input\n                            type=\"radio\"\n                            bind:group={$paymentPlan}\n                            value=\"snowball\"\n                        />\n                        Lowest Principal (Snowball)\n                    </label>\n                </div>\n            </div>\n        </div>\n    </div>\n    <p>Monthly Payment: ${$monthlyPayment}</p>\n    <input\n        type=\"range\"\n        bind:value={$monthlyPayment}\n        min={minimumMonthlyPayment}\n        max={maximumMonthlyPayment}\n    />\n</div>\n\n<style>\ninput[type=radio] {\n    margin-right: .5em;\n}\n\ninput[type=range] {\n    width: 100%;\n}\n\n.container {\n    margin-bottom: 1em;\n}\n</style>\n","<script lang=\"ts\">\n\timport { loans, storage } from \"./stores\";\n\timport LoanList from \"./LoanList.svelte\";\n\timport PaymentSchedule from \"./PaymentSchedule.svelte\";\n\timport QuickFacts from \"./QuickFacts.svelte\";\n\timport SetPaymentPlan from \"./SetPaymentPlan.svelte\";\n\n\t$storage;\n</script>\n\n<main class=\"ui container flex\">\n\t<div class=\"flex inputs\">\n\t\t<SetPaymentPlan/>\n\t\t<LoanList />\n\t</div>\n\t<div class=\"flex outputs\">\n\t\t{#if $loans.length > 0}\n\t\t<QuickFacts />\n\t\t<PaymentSchedule />\n\t\t{:else}\n\t\t<div>\n\t\t\tTo get started, add a loan.\n\t\t</div>\n\t\t{/if}\n\t</div>\n</main>\n\n<style>\n.flex {\n\tflex-wrap: wrap;\n\tflex-grow: 1;\n\tflex-shrink: 1;\n\tpadding: 1em;\n}\n\n.inputs {\n\tmin-width: 250px;\n\twidth: 300px;\n}\n\n.outputs {\n\twidth: 60%;\n}\n\ndiv.flex {\n\tflex-direction: column;\n}\n</style>\n","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_data","wholeText","set_input_value","input","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","derived","stores","initial_value","single","isArray","stores_array","auto","inited","values","pending","cleanup","sync","result","unsubscribers","loans","JSON","parse","window","localStorage","getItem","principal","interestPct","minPayment","monthlyPayment","paymentPlan","storage","$loans","$paymentPlan","setItem","stringify","paymentSchedule","$monthlyPayment","sortedLoans","sort","calculatePayment","payment","months","month","remainingPayment","loan","principalLastMonth","get","remainingPrincipal","record","createMonthZero","currentMonth","remaining","loanName","generatePaymentSchedule","e","preventDefault","newLoan","newLoanError","cleanLoan","assign","_a","trim","Number","_b","toString","replaceAll","_c","_d","validateLoan","includes","reduce","total","resetNewLoan","undefined","deleteLoan","_","toggleVisibility","classList","contains","parentElement","toggle","nextElementSibling","toFixed","totalPaid","$paymentSchedule","totalOwed","averageInterest","minimumMonthlyPayment","maximumMonthlyPayment","r","body"],"mappings":"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"}